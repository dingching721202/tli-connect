/**
 * Ë≥áÊñôÈÅ∑ÁßªËÖ≥Êú¨ - Â∞á localStorage ÂÅáË≥áÊñôÈÅ∑ÁßªÂà∞ Supabase
 * Data Migration Script - Migrate localStorage mock data to Supabase
 * 
 * Phase 4.6: ÂØ¶ÈöõË≥áÊñôÈÅ∑Áßª
 */

import { createClient } from '@supabase/supabase-js'
import { users } from '../src/data/users'
import { corporateMembers } from '../src/data/corporateMembers'

// Áí∞Â¢ÉËÆäÊï∏ÈÖçÁΩÆ
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing Supabase environment variables')
  process.exit(1)
}

// ‰ΩøÁî® Service Role Key ÂâµÂª∫ Supabase ÂÆ¢Êà∂Á´ØÔºàÂèØÁπûÈÅé RLSÔºâ
const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

console.log('üöÄ Starting data migration to Supabase...')
console.log(`üìä Database URL: ${supabaseUrl}`)

/**
 * ÈÅ∑ÁßªÁî®Êà∂Ë≥áÊñôÂà∞ core_users Ë°®
 */
async function migrateUsers() {
  console.log('\nüë• Migrating users data...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâË≥áÊñôÔºàÊ∏¨Ë©¶Áí∞Â¢ÉÔºâ
    const { error: deleteError } = await supabase
      .from('core_users')
      .delete()
      .neq('id', '00000000-0000-0000-0000-000000000000') // Delete all except dummy

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing users:', deleteError.message)
    }

    // ËΩâÊèõ‰∏¶ÊèíÂÖ•Áî®Êà∂Ë≥áÊñô
    const usersToInsert = users.map(user => ({
      id: `user-${user.id}`, // UUID Ê†ºÂºè
      email: user.email,
      full_name: user.name,
      phone: user.phone,
      password_hash: user.password, // Â∑≤Á∂ìÊòØ hashed
      campus: user.campus,
      is_active: user.account_status === 'ACTIVE',
      email_verified: false,
      last_login: null,
      created_at: user.created_at,
      updated_at: user.updated_at || user.created_at
    }))

    const { data, error } = await supabase
      .from('core_users')
      .insert(usersToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating users:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} users`)
    
    // ÈÅ∑ÁßªÁî®Êà∂ËßíËâ≤
    await migrateUserRoles()
    
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating users:', error)
    return false
  }
}

/**
 * ÈÅ∑ÁßªÁî®Êà∂ËßíËâ≤Âà∞ user_roles Ë°®
 */
async function migrateUserRoles() {
  console.log('\nüé≠ Migrating user roles...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâËßíËâ≤Ë≥áÊñô
    const { error: deleteError } = await supabase
      .from('user_roles')
      .delete()
      .neq('id', 0) // Delete all

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing roles:', deleteError.message)
    }

    // ÁÇ∫ÊØèÂÄãÁî®Êà∂ÂâµÂª∫ËßíËâ≤Ë®òÈåÑ
    const rolesToInsert = users.flatMap(user =>
      user.roles.map(role => ({
        user_id: `user-${user.id}`,
        role: role,
        organization_id: user.corp_id ? `org-${user.corp_id}` : null,
        is_primary: user.roles.indexOf(role) === 0, // Á¨¨‰∏ÄÂÄãËßíËâ≤ÁÇ∫‰∏ªË¶ÅËßíËâ≤
        assigned_by: null,
        is_active: true
      }))
    )

    const { data, error } = await supabase
      .from('user_roles')
      .insert(rolesToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating user roles:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} user roles`)
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating user roles:', error)
    return false
  }
}

/**
 * ÈÅ∑ÁßªÁµÑÁπîË≥áÊñôÂà∞ organizations Ë°®
 */
async function migrateOrganizations() {
  console.log('\nüè¢ Migrating organizations data...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâË≥áÊñô
    const { error: deleteError } = await supabase
      .from('organizations')
      .delete()
      .neq('id', 'dummy-org')

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing organizations:', deleteError.message)
    }

    // Âæû‰ºÅÊ•≠ÊúÉÂì°Ë≥áÊñôÊé®Êñ∑ÁµÑÁπî
    const uniqueOrgs = new Map()
    corporateMembers.forEach(member => {
      if (!uniqueOrgs.has(member.corp_id)) {
        uniqueOrgs.set(member.corp_id, {
          id: `org-${member.corp_id}`,
          name: member.company_name,
          contact_name: member.user_name,
          contact_email: member.user_email,
          contact_phone: null,
          address: null,
          industry: member.company_name.includes('Âè∞Á©çÈõª') ? 'ÂçäÂ∞éÈ´î' : 
                   member.company_name.includes('È¥ªÊµ∑') ? 'ÈõªÂ≠êË£ΩÈÄ†' : 'ÂÖ∂‰ªñ',
          employee_count: '1000+',
          status: 'active',
          created_at: member.created_at,
          updated_at: member.updated_at
        })
      }
    })

    // È°çÂ§ñÊ∑ªÂä†‰∏Ä‰∫õÊ∏¨Ë©¶ÁµÑÁπî
    uniqueOrgs.set('test-1', {
      id: 'org-test-1',
      name: 'Ê∏¨Ë©¶ÁßëÊäÄÊúâÈôêÂÖ¨Âè∏',
      contact_name: 'John Doe',
      contact_email: 'contact@test.com',
      contact_phone: '02-1234-5678',
      address: 'Âè∞ÂåóÂ∏Ç‰ø°Áæ©ÂçÄ‰ø°Áæ©Ë∑Ø‰∫îÊÆµ7Ëôü',
      industry: 'Ë≥áË®äÁßëÊäÄ',
      employee_count: '100-500',
      status: 'active',
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    })

    const orgsToInsert = Array.from(uniqueOrgs.values())

    const { data, error } = await supabase
      .from('organizations')
      .insert(orgsToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating organizations:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} organizations`)
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating organizations:', error)
    return false
  }
}

/**
 * ÈÅ∑ÁßªÊúÉÂì°ÊñπÊ°àÂà∞ membership_plans Ë°®
 */
async function migrateMembershipPlans() {
  console.log('\nüìã Migrating membership plans...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâË≥áÊñô
    const { error: deleteError } = await supabase
      .from('membership_plans')
      .delete()
      .neq('id', 'dummy-plan')

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing plans:', deleteError.message)
    }

    // ÂâµÂª∫Ê®ôÊ∫ñÊúÉÂì°ÊñπÊ°à
    const plansToInsert = [
      {
        id: 'plan-individual-season',
        name: 'ÂÄã‰∫∫Â≠£Â∫¶ÊúÉÂì°',
        type: 'INDIVIDUAL',
        duration_months: 3,
        price: 5000,
        campus: 'ÁæÖÊñØÁ¶èÊ†°',
        description: 'ÂÄã‰∫∫Â≠£Â∫¶ÊúÉÂì°ÊñπÊ°àÔºåÂåÖÂê´Âü∫Á§éË™≤Á®ãÈ†êÁ¥ÑÊ¨äÁõä',
        features: ['Ë™≤Á®ãÈ†êÁ¥Ñ', 'ÊïôÊùê‰∏ãËºâ', 'ÈÄ≤Â∫¶ËøΩËπ§'],
        is_active: true,
        created_at: new Date().toISOString()
      },
      {
        id: 'plan-individual-annual',
        name: 'ÂÄã‰∫∫Âπ¥Â∫¶ÊúÉÂì°',
        type: 'INDIVIDUAL',
        duration_months: 12,
        price: 18000,
        campus: 'ÁæÖÊñØÁ¶èÊ†°',
        description: 'ÂÄã‰∫∫Âπ¥Â∫¶ÊúÉÂì°ÊñπÊ°àÔºåÂåÖÂê´ÂÆåÊï¥Ë™≤Á®ãÈ†êÁ¥ÑÊ¨äÁõä',
        features: ['Ë™≤Á®ãÈ†êÁ¥Ñ', 'ÊïôÊùê‰∏ãËºâ', 'ÈÄ≤Â∫¶ËøΩËπ§', '‰∏ÄÂ∞ç‰∏ÄË´ÆË©¢'],
        is_active: true,
        created_at: new Date().toISOString()
      },
      {
        id: 'plan-corporate-annual',
        name: '‰ºÅÊ•≠Âπ¥Â∫¶ÊñπÊ°à',
        type: 'CORPORATE',
        duration_months: 12,
        price: 50000,
        campus: 'ÁæÖÊñØÁ¶èÊ†°',
        description: '‰ºÅÊ•≠Âπ¥Â∫¶ÊúÉÂì°ÊñπÊ°àÔºåÊîØÊè¥Â§ö‰ΩçÂì°Â∑•‰ΩøÁî®',
        features: ['ÊâπÈáèË™≤Á®ãÈ†êÁ¥Ñ', '‰ºÅÊ•≠Â∞àÂ±¨Ë™≤Á®ã', 'Â≠∏ÁøíÂ†±Âëä', 'Â∞àÂ±¨ÂÆ¢Êúç'],
        is_active: true,
        created_at: new Date().toISOString()
      }
    ]

    const { data, error } = await supabase
      .from('membership_plans')
      .insert(plansToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating membership plans:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} membership plans`)
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating membership plans:', error)
    return false
  }
}

/**
 * ÈÅ∑ÁßªÊúÉÂì°Ë≥áÊ†ºÂà∞ unified_memberships Ë°®
 */
async function migrateMemberships() {
  console.log('\nüé´ Migrating memberships data...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâË≥áÊñô
    const { error: deleteError } = await supabase
      .from('unified_memberships')
      .delete()
      .neq('id', 'dummy-membership')

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing memberships:', deleteError.message)
    }

    // ÁÇ∫ÊøÄÊ¥ªÁãÄÊÖãÁöÑÁî®Êà∂ÂâµÂª∫ÊúÉÂì°Ë≥áÊ†º
    const activatedUsers = users.filter(user => user.membership_status === 'activated')
    const membershipsToInsert = activatedUsers.map((user, index) => ({
      id: `membership-${user.id}`,
      user_id: `user-${user.id}`,
      organization_id: user.corp_id ? `org-${user.corp_id}` : null,
      plan_id: user.corp_id ? 'plan-corporate-annual' : 'plan-individual-annual',
      type: user.corp_id ? 'CORPORATE' : 'INDIVIDUAL',
      status: 'ACTIVATED',
      card_number: `MC${String(1000 + index).padStart(6, '0')}`,
      purchased_at: user.created_at,
      activated_at: user.created_at,
      expires_at: new Date(new Date(user.created_at).getTime() + 365 * 24 * 60 * 60 * 1000).toISOString(),
      campus: user.campus,
      price_paid: user.corp_id ? 50000 : 18000,
      auto_renewal: false,
      created_at: user.created_at,
      updated_at: user.updated_at || user.created_at
    }))

    if (membershipsToInsert.length === 0) {
      console.log('‚ÑπÔ∏è  No activated users found, skipping memberships migration')
      return true
    }

    const { data, error } = await supabase
      .from('unified_memberships')
      .insert(membershipsToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating memberships:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} memberships`)
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating memberships:', error)
    return false
  }
}

/**
 * ÂâµÂª∫Âü∫Á§éË™≤Á®ãÊ®°Êùø
 */
async function migrateCourseTemplates() {
  console.log('\nüìö Migrating course templates...')
  
  try {
    // Ê∏ÖÁêÜÁèæÊúâË≥áÊñô
    const { error: deleteError } = await supabase
      .from('course_templates')
      .delete()
      .neq('id', 'dummy-template')

    if (deleteError) {
      console.warn('‚ö†Ô∏è Warning cleaning existing templates:', deleteError.message)
    }

    // ÂâµÂª∫Âü∫Á§éË™≤Á®ãÊ®°Êùø
    const templatesToInsert = [
      {
        id: 'template-chinese-basic',
        title: 'Âü∫Á§é‰∏≠ÊñáÊúÉË©±',
        description: 'ÈÅ©Âêà‰∏≠ÊñáÂàùÂ≠∏ËÄÖÁöÑÂü∫Á§éÊúÉË©±Ë™≤Á®ã',
        category: '‰∏≠Êñá',
        level: 'ÂàùÁ¥ö',
        format: 'GROUP',
        total_sessions: 12,
        session_duration_minutes: 90,
        default_capacity: 8,
        base_pricing: {
          member: 2000,
          non_member: 2400
        },
        is_active: true,
        created_at: new Date().toISOString()
      },
      {
        id: 'template-english-business',
        title: 'ÂïÜÊ•≠Ëã±ÊñáÊ∫ùÈÄö',
        description: 'ÂïÜÊ•≠Â†¥ÂêàÁöÑËã±ÊñáÊ∫ùÈÄöÊäÄÂ∑ßË®ìÁ∑¥',
        category: 'Ëã±Êñá',
        level: '‰∏≠Á¥ö',
        format: 'GROUP',
        total_sessions: 16,
        session_duration_minutes: 120,
        default_capacity: 6,
        base_pricing: {
          member: 3200,
          non_member: 3800
        },
        is_active: true,
        created_at: new Date().toISOString()
      },
      {
        id: 'template-culture-intro',
        title: 'Âè∞ÁÅ£ÊñáÂåñÂ∞éË¶Ω',
        description: 'Ê∑±ÂÖ•‰∫ÜËß£Âè∞ÁÅ£ÊñáÂåñËàáÁ§æÊúÉ',
        category: 'ÊñáÂåñ',
        level: '‰∏çÈôê',
        format: 'WORKSHOP',
        total_sessions: 6,
        session_duration_minutes: 180,
        default_capacity: 12,
        base_pricing: {
          member: 1500,
          non_member: 1800
        },
        is_active: true,
        created_at: new Date().toISOString()
      }
    ]

    const { data, error } = await supabase
      .from('course_templates')
      .insert(templatesToInsert)
      .select()

    if (error) {
      console.error('‚ùå Error migrating course templates:', error)
      return false
    }

    console.log(`‚úÖ Successfully migrated ${data?.length || 0} course templates`)
    return true
  } catch (error) {
    console.error('‚ùå Unexpected error migrating course templates:', error)
    return false
  }
}

/**
 * ‰∏ªÈÅ∑ÁßªÂáΩÊï∏
 */
async function runMigration() {
  console.log('üéØ Phase 4.6: Data Migration - localStorage to Supabase')
  console.log('=' .repeat(60))
  
  const startTime = Date.now()
  let successCount = 0
  let totalTasks = 0

  const migrationTasks = [
    { name: 'Organizations', fn: migrateOrganizations },
    { name: 'Membership Plans', fn: migrateMembershipPlans },
    { name: 'Users', fn: migrateUsers },
    { name: 'Memberships', fn: migrateMemberships },
    { name: 'Course Templates', fn: migrateCourseTemplates }
  ]

  totalTasks = migrationTasks.length

  for (const task of migrationTasks) {
    const taskStart = Date.now()
    const success = await task.fn()
    const taskTime = Date.now() - taskStart
    
    if (success) {
      successCount++
      console.log(`‚è±Ô∏è  ${task.name} completed in ${taskTime}ms`)
    } else {
      console.error(`üí• ${task.name} failed after ${taskTime}ms`)
    }
  }

  const totalTime = Date.now() - startTime
  
  console.log('\n' + '=' .repeat(60))
  console.log('üìä Migration Summary:')
  console.log(`‚úÖ Successful: ${successCount}/${totalTasks} tasks`)
  console.log(`‚è±Ô∏è  Total time: ${totalTime}ms`)
  console.log(`üéØ Success rate: ${Math.round(successCount / totalTasks * 100)}%`)
  
  if (successCount === totalTasks) {
    console.log('üéâ All migrations completed successfully!')
    console.log('üöÄ System ready for testing with real data!')
  } else {
    console.log('‚ö†Ô∏è  Some migrations failed. Please check the logs above.')
  }
}

// Âü∑Ë°åÈÅ∑Áßª
if (require.main === module) {
  runMigration()
    .then(() => {
      console.log('\nüèÅ Migration script finished.')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\nüí• Migration script crashed:', error)
      process.exit(1)
    })
}

export { runMigration }